<?php

/**
 * @file
 * Contains a12sfactory_seo.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function a12sfactory_seo_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the a12sfactory_seo module.
    case 'help.page.a12sfactory_seo':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides some improvements related to SEO.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_pager().
 *
 * Manage the "rel next" and "rel prev" head tags.
 * @see https://www.drupal.org/project/drupal/issues/1567684#comment-12398066
 */
function a12sfactory_seo_preprocess_pager(&$pager) {
  if (!isset($pager['current']) || empty($pager['items'])) {
    return;
  }

  $current_path = \Drupal\Core\Url::fromRoute('<current>');
  $path = $current_path->setAbsolute(TRUE)->toString();

  // Correct for first page actually being page 0.
  $current_page = $pager['current'] - 1;

  // Use the base path if on page 2 otherwise `page={{current_page-1}}`.
  $prev_href = ($current_page == 1 ? $path : (!empty($pager['items']['previous']['href']) ? $path . $pager['items']['previous']['href'] : NULL));
  $next_href = (!empty($pager['items']['next']['href']) ? $path . $pager['items']['next']['href'] : NULL);

  // The $pager variable is never rendered, as the 'page', 'prev', or 'next' keys.
  // So we need to attached the HTML head links to a dummy, element that have to
  // be displayed in the pager.html.twig template.
  // We could also transform the "text" key of the "prev" or "next element to
  // a renderable array, but it could lead to issue with other contrib modules
  // that want to alter the "text"...

  // Add The prev rel link.
  if ($prev_href) {
    $pager['items']['html_head']['#attached']['html_head_link'][] = [
      [
        'rel' => 'prev',
        'href' => $prev_href,
      ],
      TRUE,
    ];
  }

  // Add the next rel link.
  if ($next_href) {
    $pager['items']['html_head']['#attached']['html_head_link'][] = [
      [
        'rel' => 'next',
        'href' => $next_href,
      ],
      TRUE,
    ];
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function a12sfactory_seo_page_attachments_alter(array &$attachments) {
  // Remove some useless link tags (not SEO relevant, and may lead to 403).
  // @see \Drupal\a12sfactory_seo\SeoManager::getUselessRelAttributes()
  $html_head_link = $attachments['#attached']['html_head_link'];

  /** @var \Drupal\a12sfactory_seo\SeoManager $seo_manager */
  $seo_manager = \Drupal::service('a12sfactory_seo.seo_manager');
  $useless_rel_attributes = $seo_manager->getUselessRelAttributes();

  foreach ($html_head_link as $key => $value) {
    if (isset($value[0]['rel']) && in_array($value[0]['rel'], $useless_rel_attributes, TRUE)){
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function a12sfactory_seo_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'page_attachments_alter') {
    $group = $implementations['a12sfactory_seo'];
    unset($implementations['a12sfactory_seo']);
    $implementations['a12sfactory_seo'] = $group;
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * Remove some useless link tags (not SEO relevant, and may lead to 403).
 * @see \Drupal\a12sfactory_seo\SeoManager::getUselessRelAttributes()
 */
function a12sfactory_seo_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($build['#view_mode'] === 'full' && $entity Instanceof NodeInterface) {
    if (!isset($build['#attached']['html_head_link'])) {
      return;
    }

    /** @var \Drupal\a12sfactory_seo\SeoManager $seo_manager */
    $seo_manager = \Drupal::service('a12sfactory_seo.seo_manager');
    $useless_rel_attributes = $seo_manager->getUselessRelAttributes();

    foreach ($build['#attached']['html_head_link'] as $key => $value) {
      if (isset($value[0]['rel']) && in_array($value[0]['rel'], $useless_rel_attributes, TRUE)){
        unset($build['#attached']['html_head_link'][$key]);
      }
    }
  }
}

