<?php
/**
 * @file
 * Install, update and uninstall functions for the A12S Factory profile.
 */

use Drupal\Core\Config\Config;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
use Drupal\symfony_mailer\Entity\MailerTransport;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\Views;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function a12sfactory_install() {
  // Set front page to "node".
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/node')->save(TRUE);

  // Restrict user registration to admin role creation.
  \Drupal::configFactory()->getEditable('user.settings')->set('register', UserInterface::REGISTER_ADMINISTRATORS_ONLY)->save(TRUE);

  // Assign user 1 the "administrator" role.
  /** @var UserInterface $user */
  $user = User::load(1);
  $user->addRole('administrator');
  $user->save();

  // Enable the admin theme.
  \Drupal::configFactory()->getEditable('node.settings')->set('use_admin_theme', TRUE)->save(TRUE);

  // Entity updates to clear up any mismatched entity and/or field definitions
  // and Fix changes were detected in the entity type and field definitions.
  // In previous Drupal versions, the 55 following lines of code were executed
  // by a single method:
  // \Drupal::entityDefinitionUpdateManager()->applyUpdates()
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_schema_repository */
  $entity_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $entity_definition_manager = \Drupal::entityDefinitionUpdateManager();
  /** @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener */
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  if ($change_list = $entity_definition_manager->getChangeList()) {
    // In case there are changes, explicitly invalidate caches.
    $entity_type_manager->clearCachedDefinitions();
    $entity_field_manager->clearCachedFieldDefinitions();

    foreach ($change_list as $entity_type_id => $change_item) {
      if (!empty($change_item['entity_type'])) {
        $entity_type = $entity_type_manager->getDefinition($entity_type_id);
        $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);

        /** @var \Drupal\Core\Entity\EntityTypeListenerInterface $entity_type_listener */
        $entity_type_listener = \Drupal::service('entity_type.listener');

        switch ($change_item['entity_type']) {
          case EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED:
            $entity_type_listener->onEntityTypeCreate($entity_type);
            break;

          case EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED:
            $original = \Drupal::service('entity.last_installed_schema.repository')->getLastInstalledDefinition($entity_type_id);
            $original_field_storage_definitions = \Drupal::service('entity.last_installed_schema.repository')->getLastInstalledFieldStorageDefinitions($entity_type_id);

            $entity_type_listener->onFieldableEntityTypeUpdate($entity_type, $original, $field_storage_definitions, $original_field_storage_definitions);
            break;
        }
      }

      // Process field storage definition changes.
      if (!empty($change_item['field_storage_definitions'])) {
        $storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
        $original_storage_definitions = $entity_schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);

        foreach ($change_item['field_storage_definitions'] as $field_name => $change) {
          $storage_definition = $storage_definitions[$field_name] ?? null;
          $original_storage_definition = $original_storage_definitions[$field_name] ?? null;

          switch ($change) {
            case EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED:
              $field_storage_definition_listener->onFieldStorageDefinitionCreate($storage_definition);
              break;

            case EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED:
              $field_storage_definition_listener->onFieldStorageDefinitionUpdate($storage_definition, $original_storage_definition);
              break;

            case EntityDefinitionUpdateManagerInterface::DEFINITION_DELETED:
              $field_storage_definition_listener->onFieldStorageDefinitionDelete($original_storage_definition);
              break;
          }
        }
      }
    }
  }

  // Disable the Taxonomy Term view as it is not useful and causes issues
  // with the REST module (DELETE).
  if ($view = Views::getView('taxonomy_term')) {
    $view->storage->setStatus(FALSE);
    $view->save();
  }
}

/**
 * Return the last hook_update_N() number.
 *
 * @return int
 *
 * @see \hook_update_last_removed()
 */
function a12sfactory_update_last_removed(): int {
  return 8009;
}

/**
 * Get the editable config instance, if exists.
 *
 * @param string $config_name
 *
 * @return \Drupal\Core\Config\Config|null
 */
function a12sfactory_get_editable_config(string $config_name): ?Config {
  $config_factory = \Drupal::configFactory();
  $installed = $config_factory->listAll($config_name);

  if (in_array($config_name, $installed)) {
    return $config_factory->getEditable($config_name);
  }

  return NULL;
}

/**
 * Helper for importing Drupal configuration from a file.
 *
 * @param string $name
 *   The config name.
 * @param ?string  $filepath
 *   The file path. Default to the "config/install" directory of the profile.
 * @param  bool  $override
 *   Whether to override the configuration, if it already exists. Default to
 *   FALSE.
 */
function a12sfactory_import_config_from_file(string $name, string $filepath = NULL, bool $override = FALSE) {
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  if (!isset($filepath)) {
    $filepath = \Drupal::service('extension.path.resolver')->getPath('module', 'a12sfactory') . '/config/install';
  }

  if ($override || !\Drupal::service('config.storage')->exists($name)) {
    $source = new FileStorage($filepath);
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Install/update field storage for the given fields.
 *
 * @param  string  $entity_type
 *   The entity type.
 * @param  array  $field_names
 *   The target field names.
 */
function a12sfactory_update_field_storage(string $entity_type, array $field_names) {
  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $storage_definitions */
  $storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type);
  /** @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_listener */
  $field_storage_listener = \Drupal::service('field_storage_definition.listener');

  foreach ($field_names as $field_name) {
    if (!empty($storage_definitions[$field_name])) {
      $field_storage_listener->onFieldStorageDefinitionCreate($storage_definitions[$field_name]);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Migrate from Swiftmailer to Symfony mailer; enable twig_tweak module.
 */
function a12sfactory_update_8010(&$sandbox) {
  $configFactory = \Drupal::configFactory();
  // We distinguish the stored configuration from the real configuration which
  // may be overridden in the settings.php or settings.*.php files.
  // We try to keep the host, port, username and password overridden from those
  // files if they used to be, and avoid storing sensitive information in the
  // Drupal configuration that can be revealed from the database or the source
  // code when configuration is kept in a source repository.
  $storedConfig = $configFactory->getEditable('swiftmailer.transport');
  $realConfig = \Drupal::config('swiftmailer.transport');

  $theme = $configFactory->get('mailsystem.settings')->get('theme');
  // @todo create theme policy. Handle "default" value.
  // There is no equivalent for "current", but the closest behavior is the
  // default one: "_active_fallback". So we can safely ignore this case.
  if ($theme !== 'current') {
    $configFactory->getEditable('symfony_mailer.mailer_policy._')
      ->set('configuration.email_theme.theme', $theme === 'default' ? '_default' : $theme)
      ->save();
  }

  /** @var \Drupal\Core\Extension\ModuleInstaller $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->uninstall(['swiftmailer', 'mailsystem']);

  // We need to remove the existing configuration below, otherwise the Symfony
  // Mailer fails, as it also define such configuration object.
  $configToDelete = $configFactory->loadMultiple(['filter.format.email_html']);
  if (isset($configToDelete['filter.format.email_html'])) {
    $configFactory->getEditable('filter.format.email_html')->delete();
  }

  try {
    $moduleInstaller->install([
      'twig_tweak',
      'symfony_mailer',
      'symfony_mailer_bc'
    ], TRUE);
  }
  catch (\Exception $e) {
    watchdog_exception('a12sfactory', $e);
  }

  if ($realConfig->get('transport') === 'smtp') {
    // Delete the "sendmail" configuration.
    $configFactory->getEditable('symfony_mailer.mailer_transport.sendmail')->delete();

    // Create the "SMTP" configuration.
    $config = [
      'user' => $storedConfig->get('smtp_credentials.swiftmailer.username'),
      'pass' => $storedConfig->get('smtp_credentials.swiftmailer.password'),
      'host' => $storedConfig->get('smtp_host'),
      'port' => $storedConfig->get('smtp_port'),
    ];

    if (class_exists('Drupal\\symfony_mailer\\Entity\\MailerTransport')) {
      $transport = MailerTransport::load('swiftmailer') ?? MailerTransport::create(['id' => 'smtp']);
      $transport->setPluginId('smtp')
        ->set('label', 'SMTP')
        ->set('configuration', $config)
        ->setAsDefault()
        ->save();
    }
  }

  return t('The Swiftmailer module has been replaced by Symfony Mailer. The Backward Compatibility module has also been enabled, as some modules may not use the new API. Take care of updating your environment variables if necessary, adapting your custom code for email templates and replacing the usages of hook_mail_alter(). You can find some resources in the <a href="@features_url">Features and status page</a> or in the <a href="@faq_url">Symfony Mailer FAQ</a>.', [
    '@features_url' => 'https://www.drupal.org/docs/contributed-modules/symfony-mailer-0/features-and-status',
    '@faq_url' => 'https://www.drupal.org/docs/contributed-modules/symfony-mailer-0/faq-tips',
  ]);
}
