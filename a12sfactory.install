<?php
/**
 * @file
 * Install, update and uninstall functions for the A12S Factory profile.
 */

use Drupal\Core\Config\Config;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
use Drupal\Core\Utility\Error;
use Drupal\symfony_mailer\Entity\MailerTransport;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function a12sfactory_install(): void {
  // Set front page to "node".
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/node')->save(TRUE);

  // Restrict user registration to admin role creation.
  \Drupal::configFactory()->getEditable('user.settings')->set('register', UserInterface::REGISTER_ADMINISTRATORS_ONLY)->save(TRUE);

  // Assign user 1 the "administrator" role.
  /** @var UserInterface $user */
  $user = User::load(1);
  $user->addRole('administrator');
  $user->save();

  // Enable the admin theme.
  \Drupal::configFactory()->getEditable('node.settings')->set('use_admin_theme', TRUE)->save(TRUE);

  // Entity updates to clear up any mismatched entity and/or field definitions
  // and fix changes were detected in the entity type and field definitions.
  // In previous Drupal versions, the 55 following lines of code were executed
  // by a single method:
  // \Drupal::entityDefinitionUpdateManager()->applyUpdates()
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_schema_repository */
  $entity_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $entity_definition_manager = \Drupal::entityDefinitionUpdateManager();
  /** @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener */
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  if ($change_list = $entity_definition_manager->getChangeList()) {
    // In case there are changes, explicitly invalidate caches.
    $entity_type_manager->clearCachedDefinitions();
    $entity_field_manager->clearCachedFieldDefinitions();

    foreach ($change_list as $entity_type_id => $change_item) {
      if (!empty($change_item['entity_type'])) {
        $entity_type = $entity_type_manager->getDefinition($entity_type_id);
        $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);

        /** @var \Drupal\Core\Entity\EntityTypeListenerInterface $entity_type_listener */
        $entity_type_listener = \Drupal::service('entity_type.listener');

        switch ($change_item['entity_type']) {
          case EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED:
            $entity_type_listener->onEntityTypeCreate($entity_type);
            break;

          case EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED:
            $original = \Drupal::service('entity.last_installed_schema.repository')->getLastInstalledDefinition($entity_type_id);
            $original_field_storage_definitions = \Drupal::service('entity.last_installed_schema.repository')->getLastInstalledFieldStorageDefinitions($entity_type_id);

            $entity_type_listener->onFieldableEntityTypeUpdate($entity_type, $original, $field_storage_definitions, $original_field_storage_definitions);
            break;
        }
      }

      // Process field storage definition changes.
      if (!empty($change_item['field_storage_definitions'])) {
        $storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
        $original_storage_definitions = $entity_schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);

        foreach ($change_item['field_storage_definitions'] as $field_name => $change) {
          $storage_definition = $storage_definitions[$field_name] ?? null;
          $original_storage_definition = $original_storage_definitions[$field_name] ?? null;

          switch ($change) {
            case EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED:
              $field_storage_definition_listener->onFieldStorageDefinitionCreate($storage_definition);
              break;

            case EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED:
              $field_storage_definition_listener->onFieldStorageDefinitionUpdate($storage_definition, $original_storage_definition);
              break;

            case EntityDefinitionUpdateManagerInterface::DEFINITION_DELETED:
              $field_storage_definition_listener->onFieldStorageDefinitionDelete($original_storage_definition);
              break;
          }
        }
      }
    }
  }
}

/**
 * Return the last hook_update_N() number.
 *
 * @return int
 *
 * @see \hook_update_last_removed()
 */
function a12sfactory_update_last_removed(): int {
  return 8010;
}

/**
 * Get the editable config instance, if exists.
 *
 * @param string $config_name
 *
 * @return \Drupal\Core\Config\Config|null
 */
function a12sfactory_get_editable_config(string $config_name): ?Config {
  $config_factory = \Drupal::configFactory();
  $installed = $config_factory->listAll($config_name);

  if (in_array($config_name, $installed)) {
    return $config_factory->getEditable($config_name);
  }

  return NULL;
}

/**
 * Helper for importing Drupal configuration from a file.
 *
 * @param string $name
 *   The config name.
 * @param ?string  $filepath
 *   The file path. Default to the "config/install" directory of the profile.
 * @param  bool  $override
 *   Whether to override the configuration, if it already exists. Default to
 *   FALSE.
 */
function a12sfactory_import_config_from_file(string $name, string $filepath = NULL, bool $override = FALSE): void {
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  if (!isset($filepath)) {
    $filepath = \Drupal::service('extension.path.resolver')->getPath('module', 'a12sfactory') . '/config/install';
  }

  if ($override || !\Drupal::service('config.storage')->exists($name)) {
    $source = new FileStorage($filepath);
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Install/update field storage for the given fields.
 *
 * @param  string  $entity_type
 *   The entity type.
 * @param  array  $field_names
 *   The target field names.
 */
function a12sfactory_update_field_storage(string $entity_type, array $field_names): void {
  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $storage_definitions */
  $storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type);
  /** @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_listener */
  $field_storage_listener = \Drupal::service('field_storage_definition.listener');

  foreach ($field_names as $field_name) {
    if (!empty($storage_definitions[$field_name])) {
      $field_storage_listener->onFieldStorageDefinitionCreate($storage_definitions[$field_name]);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Add the A12S Layout module.
 */
function a12sfactory_update_8011(&$sandbox): void {
  /** @var \Drupal\Core\Extension\ModuleInstaller $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');

  try {
    $moduleInstaller->install(['a12s_layout', 'layout_builder', 'paragraph_view_mode']);
  }
  catch (\Exception $e) {
    Error::logException(\Drupal::logger('a12sfactory'), $e);
  }
}

/**
 * Implements hook_update_N().
 *
 * Use the new a12S modules suite.
 */
function a12sfactory_update_8012(): void {
  /** @var \Drupal\Core\Extension\ModuleInstaller $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');

  try {
    $moduleInstaller->install(['a12s_core', 'a12s_theme_builder']);
  }
  catch (\Exception $e) {
    Error::logException(\Drupal::logger('a12sfactory'), $e);
  }

  // Change manually a12sfactory_seo to a12s_seo.
  $connection = \Drupal::database();
  $count = $connection->update('key_value')
    ->fields(['name' => 'a12s_seo'])
    ->condition('name', 'a12sfactory_seo')
    ->execute();

  if ($count) {
    $coreExtension = $connection->select('config')
      ->fields('config')
      ->condition('collection', '')
      ->condition('name', 'core.extension')
      ->execute()
      ->fetchAssoc();

    if (!empty($coreExtension['data'])) {
      $data = unserialize($coreExtension['data']);

      if (array_key_exists('a12sfactory_seo', $data['module'])) {
        $data['module']['a12s_seo'] = $data['module']['a12sfactory_seo'];
        unset($data['module']['a12sfactory_seo']);

        $connection->update('config')
          ->fields(['data' => serialize($data)])
          ->condition('collection', $coreExtension['collection'])
          ->condition('name', $coreExtension['name'])
          ->execute();
      }
    }
  }
}
